diff -ru ganglia-3.7.2.org/configure ganglia-3.7.2.new/configure
--- ganglia-3.7.2.org/configure	2015-07-02 02:49:35.000000000 +0700
+++ ganglia-3.7.2.new/configure	2024-11-13 09:23:56.294901776 +0700
@@ -12371,14 +12371,14 @@
     # find out python version
     { $as_echo "$as_me:${as_lineno-$LINENO}: checking Python version" >&5
 $as_echo_n "checking Python version... " >&6; }
-    PyVERSION=`$PYTHON_BIN -c 'import sys; print sys.version[:3]'`
-    PyMAJVERSION=`$PYTHON_BIN -c 'import sys; print sys.version[:1]'`
+    PyVERSION=`$PYTHON_BIN -c 'import sys; print(sys.version[:3])'`
+    PyMAJVERSION=`$PYTHON_BIN -c 'import sys; print(sys.version[:1])'`
     { $as_echo "$as_me:${as_lineno-$LINENO}: result: $PyVERSION" >&5
 $as_echo "$PyVERSION" >&6; }
     PYTHON_VERSION=$PyVERSION
 
 
-    PyEXEC_INSTALLDIR=`$PYTHON_BIN -c "import sys; print sys.exec_prefix"`
+    PyEXEC_INSTALLDIR=`$PYTHON_BIN -c "import sys; print(sys.exec_prefix)"`
     if test -f "$PyEXEC_INSTALLDIR/include/python/Python.h"; then
       PYTHON_INCLUDES="-I$PyEXEC_INSTALLDIR/include/python"
     else

diff -ru ganglia-3.7.2.org/gmond/modules/python/mod_python.c ganglia-3.7.2.new/gmond/modules/python/mod_python.c
--- ganglia-3.7.2.org/gmond/modules/python/mod_python.c	2015-07-02 02:49:35.000000000 +0700
+++ ganglia-3.7.2.new/gmond/modules/python/mod_python.c	2024-11-13 11:38:21.527003406 +0700
@@ -49,16 +49,6 @@
 #include <sys/stat.h>
 
 /*
- * Backward compatibility for 2.1 to 2.4
- */
-#if PY_MINOR_VERSION < 5
-#define Py_ssize_t int
-#if PY_MINOR_VERSION < 3
-#define PyInt_AsUnsignedLongMask PyInt_AsLong
-#endif
-#endif
-
-/*
  * Declare ourselves so the configuration routines can find and know us.
  * We'll fill it in at the end of the module.
  */
@@ -120,12 +110,8 @@
         long v = PyLong_AsLong(dv);
         snprintf(bfr, len, "%ld", v);
     }
-    else if (PyInt_Check(dv)) {
-        long v = PyInt_AsLong(dv);
-        snprintf(bfr, len, "%ld", v);
-    }
-    else if (PyString_Check(dv)) {
-        char* v = PyString_AsString(dv);
+    else if (PyUnicode_Check(dv)) {
+        char* v = PyUnicode_AsUTF8(dv);
         snprintf(bfr, len, "%s", v);
     }
     else if (PyFloat_Check(dv)) {
@@ -166,15 +152,15 @@
 get_python_uint_value(PyObject* dv, unsigned int* pint)
 {
     int cc = 1;
-    if (PyInt_Check(dv) || PyLong_Check(dv)) {
-        unsigned long v = PyInt_AsUnsignedLongMask(dv);
+    if (PyLong_Check(dv)) {
+        unsigned long v = PyLong_AsUnsignedLongMask(dv);
         *pint = (unsigned int)v;
     }
-    else if (PyString_Check(dv)) {
+    else if (PyUnicode_Check(dv)) {
         /* Convert from string to int */
         unsigned long tid;
         char *endptr;
-        char* p = PyString_AsString(dv);
+        char* p = PyUnicode_AsUTF8(dv);
         tid = strtoul(p, &endptr, 10);
         if(endptr == p || *endptr)
             cc = -1;    /* Invalid numeric format */
@@ -195,15 +181,15 @@
         long v = PyLong_AsLong(dv);
         *pint = (int)v;
     }
-    else if (PyInt_Check(dv)) {
-        long v = PyInt_AsLong(dv);
+    else if (PyLong_Check(dv)) {
+        long v = PyLong_AsLong(dv);
         *pint = (int)v;
     }
-    else if (PyString_Check(dv)) {
+    else if (PyUnicode_Check(dv)) {
         /* Convert from string to int */
         long tid;
         char *endptr;
-        char* p = PyString_AsString(dv);
+        char* p = PyUnicode_AsUTF8(dv);
         tid = strtol(p, &endptr, 10);
         if(endptr == p || *endptr)
             cc = -1;    /* Invalid numeric format */
@@ -247,15 +233,11 @@
         long v = PyLong_AsLong(dv);
         *pnum = (double)v;
     }
-    else if (PyInt_Check(dv)) {
-        long v = PyInt_AsLong(dv);
-        *pnum = (double)v;
-    }
-    else if (PyString_Check(dv)) {
+    else if (PyUnicode_Check(dv)) {
         /* Convert from string to int */
         double tid;
         char *endptr;
-        char* p = PyString_AsString(dv);
+        char* p = PyUnicode_AsUTF8(dv);
         tid = strtod(p, &endptr);
         if(endptr == p || *endptr)
             cc = -1;    /* Invalid format for double */
@@ -518,7 +500,7 @@
             param = cfg_getnsec(pymodule, "param", k);
             name = apr_pstrdup(pool, param->title);
             value = apr_pstrdup(pool, cfg_getstr(param, "value"));
-            pyvalue = PyString_FromString(value);
+            pyvalue = PyUnicode_FromString(value);
             if (name && pyvalue) {
                 PyDict_SetItemString(params_dict, name, pyvalue);
                 Py_DECREF(pyvalue);
@@ -540,6 +522,18 @@
     {NULL, NULL, 0, NULL}
 };
 
+static struct PyModuleDef GangliaModule = {
+    PyModuleDef_HEAD_INIT,
+    "ganglia",
+    NULL,
+    -1,
+    GangliaMethods,
+    NULL,
+    NULL,
+    NULL,
+    NULL
+};
+
 static int pyth_metric_init (apr_pool_t *p)
 {
     DIR *dp;
@@ -584,10 +578,10 @@
 
     /* Set up the python path to be able to load module from our module path */
     Py_Initialize();
-    Py_InitModule("ganglia", GangliaMethods);
+    PyModule_Create(&GangliaModule);
 
     PyObject *sys_path = PySys_GetObject("path");
-    PyObject *addpath = PyString_FromString(path);
+    PyObject *addpath = PyUnicode_FromString(path);
     PyList_Append(sys_path, addpath);
 
     PyEval_InitThreads();
diff -ru ganglia-3.7.2.org/contrib/check_ganglia.py ganglia-3.7.2.new/contrib/check_ganglia.py
--- ganglia-3.7.2.org/contrib/check_ganglia.py	2024-11-14 23:44:01.722617078 +0700
+++ ganglia-3.7.2.new/contrib/check_ganglia.py	2024-11-14 23:46:42.945220916 +0700
@@ -34,9 +34,9 @@
       self.inhost=0
 
 def usage():
-  print """Usage: check_ganglia \
+  print("""Usage: check_ganglia \
 -h|--host= -m|--metric= -w|--warning= \
--c|--critical= [-s|--server=] [-p|--port=] """
+-c|--critical= [-s|--server=] [-p|--port=] """)
   sys.exit(3)
 
 if __name__ == "__main__":
@@ -53,8 +53,8 @@
       "h:m:w:c:s:p:",
       ["host=", "metric=", "warning=", "critical=", "server=", "port="],
       )
-  except getopt.GetoptError, err:
-    print "check_gmond:", str(err)
+  except getopt.GetoptError as err:
+    print("check_gmond:", str(err))
     usage()
     sys.exit(3)
 
@@ -82,16 +82,16 @@
     parser = GParser(host, metric)
     value = parser.parse(s.makefile("r"))
     s.close()
-  except Exception, err:
-    print "CHECKGANGLIA UNKNOWN: Error while getting value \"%s\"" % (err)
+  except Exception as err:
+    print("CHECKGANGLIA UNKNOWN: Error while getting value \"%s\"" % (err))
     sys.exit(3)
 
   if value >= critical:
-    print "CHECKGANGLIA CRITICAL: %s is %.2f" % (metric, value)
+    print("CHECKGANGLIA CRITICAL: %s is %.2f" % (metric, value))
     sys.exit(2)
   elif value >= warning:
-    print "CHECKGANGLIA WARNING: %s is %.2f" % (metric, value)
+    print("CHECKGANGLIA WARNING: %s is %.2f" % (metric, value))
     sys.exit(1)
   else:
-    print "CHECKGANGLIA OK: %s is %.2f" % (metric, value)
+    print("CHECKGANGLIA OK: %s is %.2f" % (metric, value))
     sys.exit(0)
diff -ru ganglia-3.7.2.org/gmetad-python/Gmetad/gmetad_config.py ganglia-3.7.2.new/gmetad-python/Gmetad/gmetad_config.py
--- ganglia-3.7.2.org/gmetad-python/Gmetad/gmetad_config.py	2024-11-14 23:44:01.708616852 +0700
+++ ganglia-3.7.2.new/gmetad-python/Gmetad/gmetad_config.py	2024-11-14 23:46:43.211225212 +0700
@@ -152,7 +152,7 @@
                 break
             if args is None:
                 continue
-            if self.kwHandlers.has_key(kw):
+            if kw in self.kwHandlers:
                 self.kwHandlers[kw](args)
             elif (args.strip().startswith('{')):
                 self._setSection(kw,f)
@@ -312,17 +312,17 @@
     options, arguments = parser.parse_args()
     
     if not options.debug.isdigit():
-        print 'Invalid numeric value for --debug: %s' % options.debug
+        print('Invalid numeric value for --debug: %s' % options.debug)
         parser.print_help()
         sys.exit()
     elif not options.interactive_port.isdigit():
-        print 'Invalid numeric value for --interactive_port: %s' % options.interactive_port
+        print('Invalid numeric value for --interactive_port: %s' % options.interactive_port)
         sys.exit()
     elif not options.xml_port.isdigit():
-        print 'Invalid numeric value for --xml_port: %s' % options.xml_port
+        print('Invalid numeric value for --xml_port: %s' % options.xml_port)
         sys.exit()
     elif not os.path.exists(options.conf):
-        print 'No such configuration file: %s' % options.conf
+        print('No such configuration file: %s' % options.conf)
         parser.print_help()
         sys.exit()
         
diff -ru ganglia-3.7.2.org/gmetad-python/Gmetad/gmetad_daemon.py ganglia-3.7.2.new/gmetad-python/Gmetad/gmetad_daemon.py
--- ganglia-3.7.2.org/gmetad-python/Gmetad/gmetad_daemon.py	2024-11-14 23:44:01.709616869 +0700
+++ ganglia-3.7.2.new/gmetad-python/Gmetad/gmetad_daemon.py	2024-11-14 23:46:43.230225519 +0700
@@ -36,7 +36,7 @@
 import sys
 import resource
 
-from gmetad_config import getConfig, GmetadConfig
+from .gmetad_config import getConfig, GmetadConfig
 
 def setuid():
     cfg = getConfig()
@@ -47,7 +47,7 @@
         try:
             os.setuid(pwd.getpwnam(setuid_user)[2])
         except Exception:
-            print 'Unable to setuid to user "%s", exiting' % setuid_user
+            print('Unable to setuid to user "%s", exiting' % setuid_user)
             sys.exit()
         
 def daemonize(ignore_fds=[]):
@@ -60,15 +60,15 @@
         
     try:
         pid = os.fork()
-    except OSError, e:
-        raise Exception, 'Daemonize error: %d (%s)' % (e.errno, e.strerror)
+    except OSError as e:
+        raise Exception('Daemonize error: %d (%s)' % (e.errno, e.strerror))
     if pid == 0:
         # first child
         os.setsid()
         try:
             pid = os.fork()
-        except OSError, e:
-            raise Exception, 'Daemonize error: %d (%s)' % (e.errno, e.strerror)
+        except OSError as e:
+            raise Exception('Daemonize error: %d (%s)' % (e.errno, e.strerror))
         if pid == 0:
             # second child
             os.chdir(WORKDIR)
diff -ru ganglia-3.7.2.org/gmetad-python/Gmetad/gmetad_data.py ganglia-3.7.2.new/gmetad-python/Gmetad/gmetad_data.py
--- ganglia-3.7.2.org/gmetad-python/Gmetad/gmetad_data.py	2024-11-14 23:44:01.709616869 +0700
+++ ganglia-3.7.2.new/gmetad-python/Gmetad/gmetad_data.py	2024-11-14 23:46:43.315226892 +0700
@@ -31,14 +31,14 @@
 #*                  Brad Nicholes (bnicholes novell.com)
 #******************************************************************************/
 
-import thread, threading
+import _thread, threading
 import logging
 import time
 
-from gmetad_element import Element
-from gmetad_config import getConfig, GmetadConfig
-from gmetad_notifier import GmetadNotifier
-from gmetad_random import getRandomInterval
+from .gmetad_element import Element
+from .gmetad_config import getConfig, GmetadConfig
+from .gmetad_notifier import GmetadNotifier
+from .gmetad_random import getRandomInterval
 
 class DataStore:
     '''The Datastore object stores all of the metric data
@@ -47,7 +47,7 @@
        of the object will produce the same data store. '''
     _shared_state = {} #Storage for a singleton object
     _initialized = False
-    lock = thread.allocate_lock()
+    lock = _thread.allocate_lock()
     
     def __init__(self):
         # Replace the objects attributes with the original
@@ -58,7 +58,7 @@
         if not DataStore._initialized:
             # Allocate a lock that will be used by all threads
             #  that are reading or writing to the data store.
-            self.lock = thread.allocate_lock()
+            self.lock = _thread.allocate_lock()
             self.lock.acquire()
             self.rootElement = None
             # Initialize the data store with the GANGLIA_XML and GRID tags.
@@ -352,7 +352,7 @@
                     except KeyError:
                         pass
                     # Summarize over all of the metrics in the cluster node summary.
-                    for metricNode in clusterNode.summaryData['summary'].itervalues():
+                    for metricNode in clusterNode.summaryData['summary'].values():
                         # Don't include metrics that can not be summarized
                         if metricNode.getAttr('type') in ['string', 'timestamp']:
                             continue
@@ -368,8 +368,8 @@
                             gridNode.summaryData['summary'][str(summaryNode)] = summaryNode
                             summaryNode.setAttr('sum', metricNode.getAttr('sum'))
                         summaryNode.incAttr('num', 1)
-        except Exception, e:
-            print 'Grid summary ' + str(e) 
+        except Exception as e:
+            print('Grid summary ' + str(e)) 
         ds.releaseLock(self)
 
     def run(self):
diff -ru ganglia-3.7.2.org/gmetad-python/Gmetad/gmetad_element.py ganglia-3.7.2.new/gmetad-python/Gmetad/gmetad_element.py
--- ganglia-3.7.2.org/gmetad-python/Gmetad/gmetad_element.py	2024-11-14 23:44:01.709616869 +0700
+++ ganglia-3.7.2.new/gmetad-python/Gmetad/gmetad_element.py	2024-11-14 23:46:43.348227425 +0700
@@ -54,7 +54,7 @@
         # If any attributes where given during intialization, add them here.
         self.attrs = {}
         self.lastReportedTime = 0
-        for k,v in attrs.items():
+        for k,v in list(attrs.items()):
             self.attrs[k.lower()] = v
         self.children = {}
         self.gridDepth = -1
@@ -72,7 +72,7 @@
         
     def update(self, elem):
         ''' This method updates an existing chld node based on a new node. '''
-        for k in self.attrs.keys():
+        for k in list(self.attrs.keys()):
             try:
                 self.attrs[k] = elem.attrs[k]
             except ValueError:
@@ -80,18 +80,18 @@
         
     def __str__(self):
         ''' This method generates a string representation of a node. '''
-        if self.attrs.has_key('name'):
+        if 'name' in self.attrs:
             return Element.generateKey([self.id,self.attrs['name']])
         return Element.generateKey(self.id)
         
     def __iter__(self):
         ''' This method allow the class to be an interator over it's children. '''
-        return self.children.itervalues()
+        return iter(self.children.values())
         
     def __copy__(self):
         ''' Shallow copy method, may not be used. '''
         cp = Element(self.id, {})
-        for k in self.attrs.keys():
+        for k in list(self.attrs.keys()):
             try:
                 cp.attrs[k.lower()] = copy.copy(self.attrs[k])
             except ValueError:
@@ -102,7 +102,7 @@
         '''  This method creates a copy of the node that can be used as a summary node. '''
         attrs = {}
         # Copy all of the attributes that are necessary for a summary node.
-        for k in self.attrs.keys():
+        for k in list(self.attrs.keys()):
             try:
                 if k.lower() in ['name', 'sum', 'num', 'type', 'units', 'slope', 'source']:
                     attrs[k.lower()] = self.attrs[k]
@@ -117,7 +117,7 @@
         return cp
         
     def getAttr(self, attr):
-        if self.attrs.has_key(attr.lower()):
+        if attr.lower() in self.attrs:
             return self.attrs[attr.lower()]
         return None
         
@@ -130,8 +130,8 @@
     def incAttr(self, attr, val):
         try:
             self.attrs[attr.lower()] += val
-        except Exception, e:
-            print 'Can not increment attribute ' + str(e)
+        except Exception as e:
+            print('Can not increment attribute ' + str(e))
         
     def getSummaryData(self):
         try:
diff -ru ganglia-3.7.2.org/gmetad-python/Gmetad/gmetad_gmondReader.py ganglia-3.7.2.new/gmetad-python/Gmetad/gmetad_gmondReader.py
--- ganglia-3.7.2.org/gmetad-python/Gmetad/gmetad_gmondReader.py	2024-11-14 23:44:01.709616869 +0700
+++ ganglia-3.7.2.new/gmetad-python/Gmetad/gmetad_gmondReader.py	2024-11-14 23:46:43.397228216 +0700
@@ -38,10 +38,10 @@
 import logging
 import zlib
 
-from gmetad_config import GmetadConfig, getConfig
-from gmetad_random import getRandomInterval
-from gmetad_data import DataStore
-from gmetad_data import Element
+from .gmetad_config import GmetadConfig, getConfig
+from .gmetad_random import getRandomInterval
+from .gmetad_data import DataStore
+from .gmetad_data import Element
 
 class GmondContentHandler(xml.sax.ContentHandler):
     ''' This class implements the XML parser used to parse XML data from a gmond cluster. '''
diff -ru ganglia-3.7.2.org/gmetad-python/Gmetad/gmetad_notifier.py ganglia-3.7.2.new/gmetad-python/Gmetad/gmetad_notifier.py
--- ganglia-3.7.2.org/gmetad-python/Gmetad/gmetad_notifier.py	2024-11-14 23:44:01.708616852 +0700
+++ ganglia-3.7.2.new/gmetad-python/Gmetad/gmetad_notifier.py	2024-11-14 23:46:43.418228555 +0700
@@ -32,13 +32,13 @@
 #******************************************************************************/
 
 import threading
-import cPickle as pickle
+import pickle as pickle
 import zlib
 import logging
 
-from gmetad_element import Element
-from gmetad_config import getConfig, GmetadConfig
-from gmetad_plugin import load_plugins, start_plugins, stop_plugins, notify_plugins
+from .gmetad_element import Element
+from .gmetad_config import getConfig, GmetadConfig
+from .gmetad_plugin import load_plugins, start_plugins, stop_plugins, notify_plugins
 
 _decode = lambda x: (pickle.loads(zlib.decompress(x)))
 _encode = lambda x: buffer(zlib.compress(pickle.dumps(x, pickle.HIGHEST_PROTOCOL)))
diff -ru ganglia-3.7.2.org/gmetad-python/Gmetad/gmetad_plugin.py ganglia-3.7.2.new/gmetad-python/Gmetad/gmetad_plugin.py
--- ganglia-3.7.2.org/gmetad-python/Gmetad/gmetad_plugin.py	2024-11-14 23:44:01.709616869 +0700
+++ ganglia-3.7.2.new/gmetad-python/Gmetad/gmetad_plugin.py	2024-11-14 23:46:43.437228862 +0700
@@ -36,7 +36,7 @@
 import os
 import sys
 
-from gmetad_config import getConfig
+from .gmetad_config import getConfig
 
 _plugins = []  # Holds a list of all of the plugins
 
@@ -69,7 +69,7 @@
                     logging.warning('Plugin %s is not a gmetad plugin' % plugin_name)
                 else:
                     _plugins.append(plugin)
-            except Exception, e:
+            except Exception as e:
                 logging.warning('Failed to load plugin %s (caught exception %s)' % (plugin_name, e))
         finally:
             if fp: fp.close()
@@ -117,9 +117,9 @@
     def start(self):
         '''Called by the engine during initialization to get the plugin going.  Must
         be overridden by subclasses.'''
-        raise Exception, 'No definition provided for plugin "start" method.'
+        raise Exception('No definition provided for plugin "start" method.')
     
     def stop(self):
         '''Called by the engine during shutdown to allow the plugin to shutdown.  Must
         be overridden by subclasses.'''
-        raise Exception, 'No definition provided for plugin "stop" method.'
+        raise Exception('No definition provided for plugin "stop" method.')
diff -ru ganglia-3.7.2.org/gmetad-python/Gmetad/gmetad_xmlWriter.py ganglia-3.7.2.new/gmetad-python/Gmetad/gmetad_xmlWriter.py
--- ganglia-3.7.2.org/gmetad-python/Gmetad/gmetad_xmlWriter.py	2024-11-14 23:44:01.709616869 +0700
+++ ganglia-3.7.2.new/gmetad-python/Gmetad/gmetad_xmlWriter.py	2024-11-14 23:46:43.486229654 +0700
@@ -31,12 +31,12 @@
 #*                  Brad Nicholes (bnicholes novell.com)
 #******************************************************************************/
 
-import thread
+import _thread
 import time
 import logging
 
-from gmetad_config import GmetadConfig
-from gmetad_data import DataStore, Element
+from .gmetad_config import GmetadConfig
+from .gmetad_data import DataStore, Element
 
 class XmlWriter:
     _xml_starttag = '<?xml version="1.0" encoding="ISO-8859-1" standalone="yes"?>'
@@ -122,13 +122,13 @@
         # If we have summary data, then interate through all of the metric nodes and generate XML for each.
         summaryData = gridnode.getSummaryData()
         if summaryData is not None:
-            for m in summaryData['summary'].itervalues():
+            for m in summaryData['summary'].values():
                 cbuf += self._getXmlImpl(m, filterList, queryargs)
         # Format the XML based on all of the results.
         rbuf = '<HOSTS UP="%d" DOWN="%d" SOURCE="gmetad" />\n%s' % (hosts[0], hosts[1], cbuf)
         if self.gridDepth == 0:
             # Generate the XML for each cluster/grid node.
-            for c in gridnode.children.values():
+            for c in list(gridnode.children.values()):
                 if 'CLUSTER' == c.id or 'GRID' == c.id:
                     rbuf += self._getXmlImpl(c, filterList, queryargs)
         return rbuf
@@ -141,7 +141,7 @@
         # If we have summary data, then interate through all of the metric nodes and generate XML for each.
         summaryData = clusternode.getSummaryData()
         if summaryData is not None:
-            for m in summaryData['summary'].itervalues():
+            for m in summaryData['summary'].values():
                 cbuf += self._getXmlImpl(m, filterList, queryargs)
         # Format the XML based on all of the results.
         rbuf = '<HOSTS UP="%d" DOWN="%d" SOURCE="gmetad" />\n%s' % (hosts[0], hosts[1], cbuf)
@@ -163,7 +163,7 @@
             # Add the XML tag
             rbuf = '<%s' % element.tag
             # Add each attribute that is contained in the.  By pass some specific attributes.
-            for k,v in element.getAttrs().items():
+            for k,v in list(element.getAttrs().items()):
                 rbuf += ' %s="%s"' % (k.upper(), v)
         if queryargs is not None or ('GRID' == element.id and self.gridDepth > 0):
             if (('GRID' == element.id or 'CLUSTER' == element.id) and (filterList is None or not len(filterList))) or ('GRID' == element.id and self.gridDepth > 0):
@@ -204,7 +204,7 @@
                     pass
             if showAllChildren:
                 # For each child, call this method recusively.  This will produce a complete dump of all children
-                for c in element.children.values():
+                for c in list(element.children.values()):
                     rbuf += self._getXmlImpl(c, filterList, queryargs)
             if 'GRID' == element.tag:
                 self.gridDepth -= 1
diff -ru ganglia-3.7.2.org/gmetad-python/gmetad_consistency_test.py ganglia-3.7.2.new/gmetad-python/gmetad_consistency_test.py
--- ganglia-3.7.2.org/gmetad-python/gmetad_consistency_test.py	2024-11-14 23:44:01.708616852 +0700
+++ ganglia-3.7.2.new/gmetad-python/gmetad_consistency_test.py	2024-11-14 23:46:43.083223145 +0700
@@ -40,7 +40,7 @@
 import socket
 import xml.sax
 import sys
-from urlparse import urlsplit
+from urllib.parse import urlsplit
 
 class GmetadElement:
     def __init__(self, id):
@@ -56,7 +56,7 @@
         
     def __str__(self):
         buf = 'ID: %s\nAttrs:' % self.id
-        for k, v in self._data.items():
+        for k, v in list(self._data.items()):
             buf += ' %s=>%s' % (k,v)
         buf += '\n'
         for ce in self.child_elements:
@@ -73,7 +73,7 @@
         
     def startElement(self, tag, attrs):
         newElem = GmetadElement(tag)
-        for ak, av in attrs.items():
+        for ak, av in list(attrs.items()):
             newElem[ak] = av
         if self._elemStackSize:
             self._elemStack[self._elemStackSize-1].child_elements.append(newElem)
@@ -124,14 +124,14 @@
 def checkEquivalentXml(oldelem, newelem):
     global ignore_attr_values
     if oldelem.id != newelem.id:
-        raise Exception, 'Element ids do not match (old=%s, new=%s)' % (oldelem.id, newelem.id)
+        raise Exception('Element ids do not match (old=%s, new=%s)' % (oldelem.id, newelem.id))
     if len(oldelem._data) != len(newelem._data):
-        raise Exception, 'Element attribute numbers do not match at node %s (old=%d, new=%d)' % (oldelem.id, len(oldelem._data), len(newelem._data))
+        raise Exception('Element attribute numbers do not match at node %s (old=%d, new=%d)' % (oldelem.id, len(oldelem._data), len(newelem._data)))
     if len(oldelem.child_elements) != len(newelem.child_elements):
-        raise Exception, 'Element children numbers do not match at node %s (old=%d, new=%d)' % (oldelem.id, len(oldelem.child_elements), len(newelem.child_elements))
-    for k in oldelem._data.keys():
-        if not newelem._data.has_key(k):
-            raise Exception, 'Attribute "%s" not found in new XML' % k
+        raise Exception('Element children numbers do not match at node %s (old=%d, new=%d)' % (oldelem.id, len(oldelem.child_elements), len(newelem.child_elements)))
+    for k in list(oldelem._data.keys()):
+        if k not in newelem._data:
+            raise Exception('Attribute "%s" not found in new XML' % k)
         if oldelem[k] != newelem[k]:
             if k in ignore_attr_values:
                 # Skip context-sensitive values
@@ -142,10 +142,10 @@
             if oldelem.id == 'GRID' and k == 'AUTHORITY':
                 if urlCompare(oldelem[k], newelem[k]):
                     continue
-            raise Exception, 'Value for attribute "%s" of tag %s does not match (old=%s, new=%s)' % (k, oldelem.id, oldelem[k], newelem[k])
-    for k in newelem._data.keys():
-        if not oldelem._data.has_key(k):
-            raise Exception, 'Attribute "%s" not found in old XML' % k
+            raise Exception('Value for attribute "%s" of tag %s does not match (old=%s, new=%s)' % (k, oldelem.id, oldelem[k], newelem[k]))
+    for k in list(newelem._data.keys()):
+        if k not in oldelem._data:
+            raise Exception('Attribute "%s" not found in old XML' % k)
         if oldelem[k] != newelem[k]:
             if k in ignore_attr_values:
                 # Skip context-sensitive values
@@ -156,10 +156,10 @@
             if oldelem.id == 'GRID' and k == 'AUTHORITY':
                 if urlCompare(oldelem[k], newelem[k]):
                     continue
-            raise Exception, 'Value for attribute "%s" of tag %s does not match (old=%s, new=%s)' % (k, oldelem.id, oldelem[k], newelem[k])
+            raise Exception('Value for attribute "%s" of tag %s does not match (old=%s, new=%s)' % (k, oldelem.id, oldelem[k], newelem[k]))
     for oce in oldelem.child_elements:
         for nce in newelem.child_elements:
-            if oce._data.has_key('NAME') and nce._data.has_key('NAME'):
+            if 'NAME' in oce._data and 'NAME' in nce._data:
                 if oce['NAME'] == nce['NAME']:
                     checkEquivalentXml(oce, nce)
                     break
@@ -183,10 +183,10 @@
     
 def compare_xml(oldXmlHandler, newXmlHandler):
     if len(oldXmlHandler.elemList) != len(newXmlHandler.elemList):
-        raise Exception, 'Different number of base elements.'
+        raise Exception('Different number of base elements.')
     for oe in oldXmlHandler.elemList:
         for ne in newXmlHandler.elemList:
-            if oe._data.has_key('NAME') and ne._data.has_key('NAME'):
+            if 'NAME' in oe._data and 'NAME' in ne._data:
                 if oe['NAME'] == ne['NAME']:
                     checkEquivalentXml(oe, ne)
                     break
@@ -194,9 +194,9 @@
                 checkEquivalentXml(oe, ne)
     
 def run_xml_consistency_test(old, new):
-    print 'Running XML Consistency Test.'
-    print 'Old host is %s' % old
-    print 'New host is %s' % new
+    print('Running XML Consistency Test.')
+    print('Old host is %s' % old)
+    print('New host is %s' % new)
     
     sock = get_socket(old)
     xmlbuf = get_xml_from_socket(sock)
@@ -213,9 +213,9 @@
 def run_interactive_consistency_test(old, new):
     filters = ['\n', '/\n', '/Grid-Node\n', '/Grid-Node/localhost\n', '/Grid-Node/localhost/mem_free\n']
     for filter in filters:
-        print 'Running interactive consistency test with filter "%s"' % filter.strip()
-        print 'Old host is %s' % old
-        print 'New host is %s' % new
+        print('Running interactive consistency test with filter "%s"' % filter.strip())
+        print('Old host is %s' % old)
+        print('New host is %s' % new)
         
         sock = get_socket(old)
         sock.send(filter)
@@ -261,13 +261,13 @@
     do_interactive_test=False
     do_xml_test=False
     if options.old_gmetad_interactive == options.new_gmetad_interactive:
-        print 'Locations for old and new gmetad interative ports are the same.'
-        print 'Skipping the interactive port consistency test.'
+        print('Locations for old and new gmetad interative ports are the same.')
+        print('Skipping the interactive port consistency test.')
     else:
         do_interactive_test=True
     if options.old_gmetad_xml == options.new_gmetad_xml:
-        print 'Locations for old and new gmetad xml ports are the same.'
-        print 'Skipping the xml port consistency test.'
+        print('Locations for old and new gmetad xml ports are the same.')
+        print('Skipping the xml port consistency test.')
     else:
         do_xml_test=True
         
@@ -298,5 +298,5 @@
             line = f.readline()
             pid = line.strip()
             os.kill(int(pid), signal.SIGTERM)
-    print 'All tests passed.'
+    print('All tests passed.')
 
diff -ru ganglia-3.7.2.org/gmetad-python/gmetad.py ganglia-3.7.2.new/gmetad-python/gmetad.py
--- ganglia-3.7.2.org/gmetad-python/gmetad.py	2024-11-14 23:44:01.708616852 +0700
+++ ganglia-3.7.2.new/gmetad-python/gmetad.py	2024-11-14 23:46:43.009221950 +0700
@@ -190,7 +190,7 @@
             logging.debug('Wrote pid %d to pidfile %s' % (os.getpid(), gmetadConfig[GmetadConfig.PIDFILE]))
             pffd.close()
             pffd = open(gmetadConfig[GmetadConfig.PIDFILE], 'r')
-        except Exception, e:
+        except Exception as e:
             logging.error('Unable to write PID %d to %s (%s)' % (os.getpid(), gmetadConfig[GmetadConfig.PIDFILE], e))
             sys.exit()
 
@@ -218,7 +218,7 @@
             asyncore.loop()
         except KeyboardInterrupt:
             logging.info('Shutting down...')
-        except Exception, e:
+        except Exception as e:
             logging.error('Caught exception: %s' % e)
             raise
     finally:
@@ -233,9 +233,9 @@
         try:
             xmlSocket.close()
             interactiveSocket.close()
-        except AttributeError, e:
+        except AttributeError as e:
             logging.error ('Problem closing socket: %s'% e)
-        except Exception, e:
+        except Exception as e:
             logging.error('Caught exception: %s' % e)
         if pffd is not None:
             pffd.close()
diff -ru ganglia-3.7.2.org/gmetad-python/plugins/rrd_plugin.py ganglia-3.7.2.new/gmetad-python/plugins/rrd_plugin.py
--- ganglia-3.7.2.org/gmetad-python/plugins/rrd_plugin.py	2024-11-14 23:44:01.708616852 +0700
+++ ganglia-3.7.2.new/gmetad-python/plugins/rrd_plugin.py	2024-11-14 23:46:43.530230364 +0700
@@ -86,7 +86,7 @@
         '''This method overrides the plugin base class method.  It is used to
             parse the plugin specific configuration directives.'''
         for kw,args in cfgdata:
-            if self.kwHandlers.has_key(kw):
+            if kw in self.kwHandlers:
                 self.kwHandlers[kw](args)
 
     def _parseRrdRootdir(self, arg):
@@ -105,7 +105,7 @@
         ''' This method validates that an RRD directory exists or creates the directory
             if it doesn't exist. '''
         if not os.path.isdir(dir):
-            os.mkdir(dir, 0755)
+            os.mkdir(dir, 0o755)
             
     def _createRRD(self, clusterNode, metricNode, rrdPath, step, summary):
         ''' This method creates a new metric RRD file.'''
@@ -136,7 +136,7 @@
             # Create the RRD file with the supplied args.
             rrdtool.create(*args)
             logging.debug('Created rrd %s'%rrdPath)
-        except Exception, e:
+        except Exception as e:
             logging.info('Error creating rrd %s - %s'%(rrdPath, str(e)))
         
     def _updateRRD(self, clusterNode, metricNode, rrdPath, summary):
@@ -155,7 +155,7 @@
             # Update the RRD file with the current timestamp and value
             rrdtool.update(*args)
             #logging.debug('Updated rrd %s with value %s'%(rrdPath, str(metricNode.getAttr('val'))))
-        except Exception, e:
+        except Exception as e:
             logging.info('Error updating rrd %s - %s'%(rrdPath, str(e)))
 
     def start(self):
diff -ru ganglia-3.7.2.org/gmetad-python/plugins/rrd_summary_plugin.py ganglia-3.7.2.new/gmetad-python/plugins/rrd_summary_plugin.py
--- ganglia-3.7.2.org/gmetad-python/plugins/rrd_summary_plugin.py	2024-11-14 23:44:01.708616852 +0700
+++ ganglia-3.7.2.new/gmetad-python/plugins/rrd_summary_plugin.py	2024-11-14 23:46:43.573231059 +0700
@@ -94,7 +94,7 @@
             clusterPath = '%s/__SummaryInfo__'%clusterPath
             self._checkDir(clusterPath)
             # Update metrics for each cluster
-            for metricNode in clusterNode.summaryData['summary'].itervalues():
+            for metricNode in clusterNode.summaryData['summary'].values():
                 # Create the summary RRD final path and validate it
                 rrdPath = '%s/%s.rrd'%(clusterPath,metricNode.getAttr('name'))
                 # Create the RRD metric summary file if it doesn't exist
@@ -119,7 +119,7 @@
                     return
             
                 # Update metrics RRDs for grid summary
-                for metricNode in clusterNode.summaryData['summary'].itervalues():
+                for metricNode in clusterNode.summaryData['summary'].values():
                     # Create the summary RRD final path and validate it.
                     rrdPath = '%s/%s.rrd'%(gridPath,metricNode.getAttr('name'))
                     # if the RRD file doesn't exist then create it
@@ -128,7 +128,7 @@
                         #need to do some error checking here if the createRRD failed
                     # Update the RRD file.
                     self._updateRRD(clusterNode, metricNode, rrdPath, True)
-            except Exception, e:
+            except Exception as e:
                 logging.error('Error writing to summary RRD %s'%str(e))
 
         #print "RRDSummary notify called"
@@ -167,7 +167,7 @@
                     continue
             
                 # Update metrics RRDs for each cluster summary in the grid
-                for metricNode in gridNode.summaryData['summary'].itervalues():
+                for metricNode in gridNode.summaryData['summary'].values():
                     # Create the summary RRD final path and validate it.
                     rrdPath = '%s/%s.rrd'%(rootPath,metricNode.getAttr('name'))
                     # if the RRD file doesn't exist then create it
@@ -176,7 +176,7 @@
                         #need to do some error checking here if the createRRD failed
                     # Update the RRD file.
                     self._updateRRD(rootNode, metricNode, rrdPath, True)
-        except Exception, e:
+        except Exception as e:
             logging.error('Error writing to summary RRD %s'%str(e))
         ds.releaseLock(self)
         #print "RRDRootSummary called"
diff -ru ganglia-3.7.2.org/gmond/python_modules/apache_status/apache_status.py ganglia-3.7.2.new/gmond/python_modules/apache_status/apache_status.py
--- ganglia-3.7.2.org/gmond/python_modules/apache_status/apache_status.py	2024-11-14 23:44:01.716616982 +0700
+++ ganglia-3.7.2.new/gmond/python_modules/apache_status/apache_status.py	2024-11-14 23:46:43.654232367 +0700
@@ -4,7 +4,7 @@
 import os
 import threading
 import time
-import urllib2
+import urllib.request, urllib.error, urllib.parse
 import traceback
 import re
 import copy
@@ -44,7 +44,7 @@
     NAME_PREFIX + 'idle'            : {'key': 'I', 'desc': 'Idle cleanup of worker'},
     NAME_PREFIX + 'open_slot'       : {'key': '.', 'desc': 'Open slot with no current process'},
     }
-Scoreboard_bykey = dict([(v["key"], k) for (k, v) in Scoreboard.iteritems()])
+Scoreboard_bykey = dict([(v["key"], k) for (k, v) in Scoreboard.items()])
 
 SSL_REGEX = re.compile('^(cache type:) (.*)(<b>)(?P<shared_mem>[0-9]+)(</b> bytes, current sessions: <b>)(?P<current_sessions>[0-9]+)(</b><br>subcaches: <b>)(?P<num_subcaches>[0-9]+)(</b>, indexes per subcache: <b>)(?P<indexes_per_subcache>[0-9]+)(</b><br>)(.*)(<br>index usage: <b>)(?P<index_usage>[0-9]+)(%</b>, cache usage: <b>)(?P<cache_usage>[0-9]+)(%</b><br>total sessions stored since starting: <b>)(?P<sessions_stored>[0-9]+)(</b><br>total sessions expired since starting: <b>)(?P<sessions_expired>[0-9]+)(</b><br>total \(pre-expiry\) sessions scrolled out of the cache: <b>)(?P<sessions_scrolled_outof_cache>[0-9]+)(</b><br>total retrieves since starting: <b>)(?P<retrieves_hit>[0-9]+)(</b> hit, <b>)(?P<retrieves_miss>[0-9]+)(</b> miss<br>total removes since starting: <b>)(?P<removes_hit>[0-9]+)(</b> hit, <b>)(?P<removes_miss>[0-9]+)')
 # Good for Apache 2.2
@@ -67,17 +67,17 @@
 
     if (time.time() - METRICS['time']) > METRICS_CACHE_MAX:
 
-        metrics = dict([(k, 0) for k in Scoreboard.keys()])
+        metrics = dict([(k, 0) for k in list(Scoreboard.keys())])
 
         # This is the short server-status. Lacks SSL metrics
         try:
-            req = urllib2.Request(SERVER_STATUS_URL + "?auto")
+            req = urllib.request.Request(SERVER_STATUS_URL + "?auto")
 
             # Download the status file
             if sys.version_info < (2, 6):
-                res = urllib2.urlopen(req)
+                res = urllib.request.urlopen(req)
             else:
-                res = urllib2.urlopen(req, timeout=2)
+                res = urllib.request.urlopen(req, timeout=2)
 
             for line in res:
                 split_line = line.rstrip().split(": ")
@@ -92,20 +92,20 @@
                         metric_name = long_metric_name
                     metrics[metric_name] = split_line[1]
 
-        except urllib2.URLError:
+        except urllib.error.URLError:
             traceback.print_exc()
 
         # If we are collecting SSL metrics we'll do
         if COLLECT_SSL:
 
             try:
-                req2 = urllib2.Request(SERVER_STATUS_URL)
+                req2 = urllib.request.Request(SERVER_STATUS_URL)
 
                 # Download the status file
                 if sys.version_info < (2, 6):
-                    res = urllib2.urlopen(req2)
+                    res = urllib.request.urlopen(req2)
                 else:
-                    res = urllib2.urlopen(req2, timeout=2)
+                    res = urllib.request.urlopen(req2, timeout=2)
 
                 for line in res:
                     regMatch = SSL_REGEX.match(line)
@@ -115,7 +115,7 @@
                             #print SSL_NAME_PREFIX + key + "=" + linebits[key]
                             metrics[SSL_NAME_PREFIX + key] = linebits[key]
 
-            except urllib2.URLError:
+            except urllib.error.URLError:
                 traceback.print_exc()
 
         LAST_METRICS = copy.deepcopy(METRICS)
@@ -134,7 +134,7 @@
 
     try:
         result = metrics['data'][name]
-    except StandardError:
+    except Exception:
         result = 0
 
     return result
@@ -155,7 +155,7 @@
     try:
         delta = multiplier * (float(curr_metrics['data'][name]) - float(last_metrics['data'][name])) / (curr_metrics['time'] - last_metrics['time'])
         if delta < 0:
-            print name + " is less 0"
+            print(name + " is less 0")
             delta = 0
     except KeyError:
         delta = 0.0
@@ -165,7 +165,7 @@
 
 def create_desc(prop):
     d = Desc_Skel.copy()
-    for k, v in prop.iteritems():
+    for k, v in prop.items():
         d[k] = v
     return d
 
@@ -173,8 +173,8 @@
 def metric_init(params):
     global descriptors, Desc_Skel, SERVER_STATUS_URL, COLLECT_SSL
 
-    print '[apache_status] Received the following parameters'
-    print params
+    print('[apache_status] Received the following parameters')
+    print(params)
 
     if "metric_group" not in params:
         params["metric_group"] = "apache"
@@ -261,7 +261,7 @@
                 "description": "Uptime",
                 }))
 
-    for k, v in Scoreboard.iteritems():
+    for k, v in Scoreboard.items():
         descriptors.append(create_desc({
                     "name"        : k,
                     "call_back"   : get_value,
@@ -400,9 +400,9 @@
             for d in descriptors:
                 v = d['call_back'](d['name'])
                 if d['name'] == NAME_PREFIX + "rps":
-                    print 'value for %s is %.4f' % (d['name'], v)
+                    print('value for %s is %.4f' % (d['name'], v))
                 else:
-                    print 'value for %s is %s' % (d['name'], v)
+                    print('value for %s is %s' % (d['name'], v))
             time.sleep(15)
     except KeyboardInterrupt:
         os._exit(1)
diff -ru ganglia-3.7.2.org/gmond/python_modules/cpu/cpu_stats.py ganglia-3.7.2.new/gmond/python_modules/cpu/cpu_stats.py
--- ganglia-3.7.2.org/gmond/python_modules/cpu/cpu_stats.py	2024-11-14 23:44:01.717616998 +0700
+++ ganglia-3.7.2.new/gmond/python_modules/cpu/cpu_stats.py	2024-11-14 23:46:43.703233158 +0700
@@ -75,7 +75,7 @@
 
     try:
         result = metrics['data'][name][0]
-    except StandardError:
+    except Exception:
         result = 0
 
     return result
@@ -97,7 +97,7 @@
     try:
         delta = (float(curr_metrics['data'][name][0]) - float(last_metrics['data'][name][0])) / (curr_metrics['time'] - last_metrics['time'])
         if delta < 0:
-            print name + " is less 0"
+            print(name + " is less 0")
             delta = 0
     except KeyError:
         delta = 0.0
@@ -124,7 +124,7 @@
     try:
         delta = (float(curr_metrics['data']['softirq'][index]) - float(last_metrics['data']['softirq'][index])) / (curr_metrics['time'] - last_metrics['time'])
         if delta < 0:
-            print name + " is less 0"
+            print(name + " is less 0")
             delta = 0
     except KeyError:
         delta = 0.0
@@ -134,7 +134,7 @@
 
 def create_desc(skel, prop):
     d = skel.copy()
-    for k, v in prop.iteritems():
+    for k, v in prop.items():
         d[k] = v
     return d
 
@@ -279,6 +279,6 @@
     while True:
         for d in descriptors:
             v = d['call_back'](d['name'])
-            print '%s = %s' % (d['name'], v)
-        print 'Sleeping 15 seconds'
+            print('%s = %s' % (d['name'], v))
+        print('Sleeping 15 seconds')
         time.sleep(5)
diff -ru ganglia-3.7.2.org/gmond/python_modules/db/DBUtil.py ganglia-3.7.2.new/gmond/python_modules/db/DBUtil.py
--- ganglia-3.7.2.org/gmond/python_modules/db/DBUtil.py	2024-11-14 23:44:01.714616949 +0700
+++ ganglia-3.7.2.new/gmond/python_modules/db/DBUtil.py	2024-11-14 23:46:43.779234386 +0700
@@ -51,7 +51,7 @@
                 args = tuple()
             else:
                 args = self.default_factory,
-            return type(self), args, None, None, self.items()
+            return type(self), args, None, None, list(self.items())
         def copy(self):
             return self.__copy__()
         def __copy__(self):
@@ -59,7 +59,7 @@
         def __deepcopy__(self, memo):
             import copy
             return type(self)(self.default_factory,
-                              copy.deepcopy(self.items()))
+                              copy.deepcopy(list(self.items())))
         def __repr__(self):
             return 'defaultdict(%s, %s)' % (self.default_factory,
                                             dict.__repr__(self))
@@ -77,7 +77,7 @@
 def longish(x):
         if len(x):
                 try:
-                        return long(x)
+                        return int(x)
                 except ValueError:
                         if(x.endswith(',')):
                            return longish(x[:-1])
@@ -92,7 +92,7 @@
 def hexlongish(x):
         if len(x):
                 try:
-                        return long(str(x), 16)
+                        return int(str(x), 16)
                 except ValueError:
                         return longish(x[:-1])
         else:
@@ -101,7 +101,7 @@
 def parse_innodb_status(innodb_status_raw, innodb_version="1.0"):
         def sumof(status):
                 def new(*idxs):
-                        return sum(map(lambda x: longish(status[x]), idxs))
+                        return sum([longish(status[x]) for x in idxs])
                 return new
 
         innodb_status = defaultdict(int)
@@ -280,5 +280,6 @@
                 cursor.close()
 
                 conn.close()
-        except MySQLdb.OperationalError, (errno, errmsg):
+        except MySQLdb.OperationalError as xxx_todo_changeme:
+                (errno, errmsg) = xxx_todo_changeme.args
                 raise
diff -ru ganglia-3.7.2.org/gmond/python_modules/db/mysql.py ganglia-3.7.2.new/gmond/python_modules/db/mysql.py
--- ganglia-3.7.2.org/gmond/python_modules/db/mysql.py	2024-11-14 23:44:01.714616949 +0700
+++ ganglia-3.7.2.new/gmond/python_modules/db/mysql.py	2024-11-14 23:46:43.970237471 +0700
@@ -154,7 +154,7 @@
             cursor.execute("SHOW SLAVE STATUS")
             res = cursor.fetchone()
             if res:
-                for (k,v) in res.items():
+                for (k,v) in list(res.items()):
                     slave_status[k.lower()] = v
             else:
                 get_slave = False
@@ -165,7 +165,8 @@
         cursor.close()
 
         conn.close()
-    except MySQLdb.OperationalError, (errno, errmsg):
+    except MySQLdb.OperationalError as xxx_todo_changeme:
+        (errno, errmsg) = xxx_todo_changeme.args
         logging.error('error updating stats')
         logging.error(errmsg)
         return False
@@ -1097,9 +1098,9 @@
 
     for stats_descriptions in (innodb_stats_descriptions, master_stats_descriptions, misc_stats_descriptions, slave_stats_descriptions):
         for label in stats_descriptions:
-            if mysql_stats.has_key(label):
+            if label in mysql_stats:
                 format = '%u'
-                if stats_descriptions[label].has_key('value_type'):
+                if 'value_type' in stats_descriptions[label]:
                     if stats_descriptions[label]['value_type'] == "float":
                         format = '%f'
 
@@ -1165,7 +1166,7 @@
     for d in descriptors:
         v = d['call_back'](d['name'])
         if not options.quiet:
-            print ' %s: %s %s [%s]' % (d['name'], v, d['units'], d['description'])
+            print(' %s: %s %s [%s]' % (d['name'], v, d['units'], d['description']))
 
         if options.gmetric:
             if d['value_type'] == 'uint':
diff -ru ganglia-3.7.2.org/gmond/python_modules/db/redis.py ganglia-3.7.2.new/gmond/python_modules/db/redis.py
--- ganglia-3.7.2.org/gmond/python_modules/db/redis.py	2024-11-14 23:44:01.714616949 +0700
+++ ganglia-3.7.2.new/gmond/python_modules/db/redis.py	2024-11-14 23:46:44.002237987 +0700
@@ -83,7 +83,7 @@
                           v = cps
                   #logging.debug("submittincg metric %s is %s" % (n, int(v)))
                   metric_handler.info[n] = int(v)  # TODO Use value_type.
-        except Exception, e:
+        except Exception as e:
             #logging.debug("caught exception %s" % e)
             pass
         s.close()
@@ -121,7 +121,7 @@
         "db0": {"units": "keys"},
     }
     metric_handler.descriptors = {}
-    for name, updates in metrics.iteritems():
+    for name, updates in metrics.items():
         descriptor = {
             "name": name,
             "call_back": metric_handler,
@@ -135,7 +135,7 @@
         }
         descriptor.update(updates)
         metric_handler.descriptors[name] = descriptor
-    return metric_handler.descriptors.values()
+    return list(metric_handler.descriptors.values())
 
 
 def metric_cleanup():
diff -ru ganglia-3.7.2.org/gmond/python_modules/db/riak.py ganglia-3.7.2.new/gmond/python_modules/db/riak.py
--- ganglia-3.7.2.org/gmond/python_modules/db/riak.py	2024-11-14 23:44:01.714616949 +0700
+++ ganglia-3.7.2.new/gmond/python_modules/db/riak.py	2024-11-14 23:46:44.203241234 +0700
@@ -24,7 +24,7 @@
 import sys
 import threading
 import time
-import urllib2
+import urllib.request, urllib.error, urllib.parse
 import traceback
 import json
 
@@ -37,7 +37,7 @@
 
 def dprint(f, *v):
     if Debug:
-        print >>sys.stderr, "DEBUG: " + f % v
+        print("DEBUG: " + f % v, file=sys.stderr)
 
 
 def floatable(str):
@@ -84,18 +84,18 @@
 
     def update_metric(self):
         try:
-            req = urllib2.Request(url=self.url)
-            res = urllib2.urlopen(req)
+            req = urllib.request.Request(url=self.url)
+            res = urllib.request.urlopen(req)
             stats = res.read()
             dprint("%s", stats)
             json_stats = json.loads(stats)
-            for (key, value) in json_stats.iteritems():
+            for (key, value) in json_stats.items():
                 dprint("%s = %s", key, value)
                 if value == 'undefined':
                     self.metric[self.mp + '_' + key] = 0
                 else:
                     self.metric[self.mp + '_' + key] = value
-        except urllib2.URLError:
+        except urllib.error.URLError:
             traceback.print_exc()
         else:
             res.close()
@@ -116,7 +116,7 @@
     if "metrix_prefix" not in params:
         params["metrix_prefix"] = "riak"
 
-    print params
+    print(params)
 
     # initialize skeleton of descriptors
     Desc_Skel = {
@@ -1035,7 +1035,7 @@
 
 def create_desc(skel, prop):
     d = skel.copy()
-    for k, v in prop.iteritems():
+    for k, v in prop.items():
         d[k] = v
     return d
 
@@ -1057,7 +1057,7 @@
         while True:
             for d in descriptors:
                 v = d['call_back'](d['name'])
-                print ('value for %s is ' + d['format']) % (d['name'],  v)
+                print(('value for %s is ' + d['format']) % (d['name'],  v))
             time.sleep(5)
     except KeyboardInterrupt:
         time.sleep(0.2)
diff -ru ganglia-3.7.2.org/gmond/python_modules/disk/diskfree.py ganglia-3.7.2.new/gmond/python_modules/disk/diskfree.py
--- ganglia-3.7.2.org/gmond/python_modules/disk/diskfree.py	2024-11-14 23:44:01.717616998 +0700
+++ ganglia-3.7.2.new/gmond/python_modules/disk/diskfree.py	2024-11-14 23:46:44.230241670 +0700
@@ -152,4 +152,4 @@
     }
     descriptors = metric_init(PARAMS)
     for d in descriptors:
-        print (('%s = %s') % (d['name'], d['format'])) % (d['call_back'](d['name']))
+        print((('%s = %s') % (d['name'], d['format'])) % (d['call_back'](d['name'])))
diff -ru ganglia-3.7.2.org/gmond/python_modules/disk/diskstat.py ganglia-3.7.2.new/gmond/python_modules/disk/diskstat.py
--- ganglia-3.7.2.org/gmond/python_modules/disk/diskstat.py	2024-11-14 23:44:01.717616998 +0700
+++ ganglia-3.7.2.new/gmond/python_modules/disk/diskstat.py	2024-11-14 23:46:44.318243091 +0700
@@ -532,7 +532,7 @@
         for d in descriptors:
             v = d['call_back'](d['name'])
             if not options.quiet:
-                print ' %s: %s %s [%s]' % (d['name'], v, d['units'], d['description'])
+                print(' %s: %s %s [%s]' % (d['name'], v, d['units'], d['description']))
 
             if options.gmetric:
                 if d['value_type'] == 'uint':
@@ -544,5 +544,5 @@
                     (options.gmetric_bin, options.gmond_conf, v, d['units'], value_type, d['name'], d['slope'])
                 os.system(cmd)
 
-        print 'Sleeping 15 seconds'
+        print('Sleeping 15 seconds')
         time.sleep(15)
diff -ru ganglia-3.7.2.org/gmond/python_modules/disk/multidisk.py ganglia-3.7.2.new/gmond/python_modules/disk/multidisk.py
--- ganglia-3.7.2.org/gmond/python_modules/disk/multidisk.py	2024-11-14 23:44:01.717616998 +0700
+++ ganglia-3.7.2.new/gmond/python_modules/disk/multidisk.py	2024-11-14 23:46:44.341243463 +0700
@@ -118,7 +118,7 @@
             continue
 
         if ganglia.get_debug_msg_level() > 1:
-            print 'Discovered device %s' % line[1]
+            print('Discovered device %s' % line[1])
 
         descriptors.append(Init_Metric(line, 'disk_total', int(1200),
             'double', 'GB', 'both', '%.3f',
@@ -140,4 +140,4 @@
     metric_init(None)
     for d in descriptors:
         v = d['call_back'](d['name'])
-        print 'value for %s is %f' % (d['name'],  v)
+        print('value for %s is %f' % (d['name'],  v))
diff -ru ganglia-3.7.2.org/gmond/python_modules/example/example.py ganglia-3.7.2.new/gmond/python_modules/example/example.py
--- ganglia-3.7.2.org/gmond/python_modules/example/example.py	2024-11-14 23:44:01.717616998 +0700
+++ ganglia-3.7.2.new/gmond/python_modules/example/example.py	2024-11-14 23:46:44.353243656 +0700
@@ -54,8 +54,8 @@
     global Constant_Value
     random.seed()
 
-    print '[pyexample] Received the following parameters'
-    print params
+    print('[pyexample] Received the following parameters')
+    print(params)
 
     if 'RandomMax' in params:
         Random_Max = int(params['RandomMax'])
@@ -97,4 +97,4 @@
     metric_init(params)
     for d in descriptors:
         v = d['call_back'](d['name'])
-        print 'value for %s is %u' % (d['name'], v)
+        print('value for %s is %u' % (d['name'], v))
diff -ru ganglia-3.7.2.org/gmond/python_modules/example/spfexample.py ganglia-3.7.2.new/gmond/python_modules/example/spfexample.py
--- ganglia-3.7.2.org/gmond/python_modules/example/spfexample.py	2024-11-14 23:44:01.717616998 +0700
+++ ganglia-3.7.2.new/gmond/python_modules/example/spfexample.py	2024-11-14 23:46:44.374243996 +0700
@@ -133,5 +133,5 @@
     d = metric_init(params)
     for d in descriptors:
         v = d['call_back'](d['name'])
-        print 'value for %s is %s' % (d['name'], str(v))
-    print d
+        print('value for %s is %s' % (d['name'], str(v)))
+    print(d)
diff -ru ganglia-3.7.2.org/gmond/python_modules/memcached/memcached.py ganglia-3.7.2.new/gmond/python_modules/memcached/memcached.py
--- ganglia-3.7.2.org/gmond/python_modules/memcached/memcached.py	2024-11-14 23:44:01.717616998 +0700
+++ ganglia-3.7.2.new/gmond/python_modules/memcached/memcached.py	2024-11-14 23:46:44.462245417 +0700
@@ -19,7 +19,7 @@
 
 def dprint(f, *v):
     if Debug:
-        print >>sys.stderr, "DEBUG: " + f % v
+        print("DEBUG: " + f % v, file=sys.stderr)
 
 
 def floatable(str):
@@ -86,7 +86,7 @@
                     rfd, wfd, xfd = select.select([sock], [], [], self.timeout)
 
                     if not rfd:
-                        print >>sys.stderr, "ERROR: select timeout"
+                        print("ERROR: select timeout", file=sys.stderr)
                         break
 
                     for fd in rfd:
@@ -94,19 +94,19 @@
                             try:
                                 data = fd.recv(8192)
                                 msg += data
-                            except (IOError, OSError), e:
+                            except (IOError, OSError) as e:
                                 if e.errno != errno.EINTR:
                                     raise
 
                     if msg.find("END"):
                         break
-                except select.error, e:
+                except select.error as e:
                     if e[0] != errno.EINTR:
                         raise
 
             sock.close()
-        except socket.error, e:
-            print >>sys.stderr, "ERROR: %s" % e
+        except socket.error as e:
+            print("ERROR: %s" % e, file=sys.stderr)
 
         for m in msg.split("\r\n"):
             d = m.split(" ")
@@ -140,7 +140,7 @@
 def metric_init(params):
     global descriptors, Desc_Skel, _Worker_Thread, Debug
 
-    print '[memcached] memcached protocol "stats"'
+    print('[memcached] memcached protocol "stats"')
     if "type" not in params:
         params["type"] = "memcached"
 
@@ -150,7 +150,7 @@
         elif params["type"] == "Tokyo Tyrant":
             params["metrix_prefix"] = "tt"
 
-    print params
+    print(params)
 
     # initialize skeleton of descriptors
     Desc_Skel = {
@@ -362,7 +362,7 @@
 
 def create_desc(skel, prop):
     d = skel.copy()
-    for k, v in prop.iteritems():
+    for k, v in prop.items():
         d[k] = v
     return d
 
@@ -391,7 +391,7 @@
         while True:
             for d in descriptors:
                 v = d['call_back'](d['name'])
-                print ('value for %s is ' + d['format']) % (d['name'], v)
+                print(('value for %s is ' + d['format']) % (d['name'], v))
             time.sleep(5)
     except KeyboardInterrupt:
         time.sleep(0.2)
diff -ru ganglia-3.7.2.org/gmond/python_modules/memory/mem_stats.py ganglia-3.7.2.new/gmond/python_modules/memory/mem_stats.py
--- ganglia-3.7.2.org/gmond/python_modules/memory/mem_stats.py	2024-11-14 23:44:01.714616949 +0700
+++ ganglia-3.7.2.new/gmond/python_modules/memory/mem_stats.py	2024-11-14 23:46:44.525246434 +0700
@@ -43,7 +43,7 @@
 
 def create_desc(skel, prop):
     d = skel.copy()
-    for k, v in prop.iteritems():
+    for k, v in prop.items():
         d[k] = v
     return d
 
@@ -384,4 +384,4 @@
     metric_init({})
     for d in descriptors:
         v = d['call_back'](d['name'])
-        print 'value for %s is %f' % (d['name'], v)
+        print('value for %s is %f' % (d['name'], v))
diff -ru ganglia-3.7.2.org/gmond/python_modules/network/multi_interface.py ganglia-3.7.2.new/gmond/python_modules/network/multi_interface.py
--- ganglia-3.7.2.org/gmond/python_modules/network/multi_interface.py	2024-11-14 23:44:01.716616982 +0700
+++ ganglia-3.7.2.new/gmond/python_modules/network/multi_interface.py	2024-11-14 23:46:44.578247290 +0700
@@ -74,7 +74,7 @@
 
 def create_desc(skel, prop):
     d = skel.copy()
-    for k, v in prop.iteritems():
+    for k, v in prop.items():
         d[k] = v
     return d
 
@@ -242,7 +242,7 @@
         try:
             delta = (float(curr_metrics['data'][iface][index]) - float(last_metrics['data'][iface][index])) / (curr_metrics['time'] - last_metrics['time'])
             if delta < 0:
-                print name + " is less 0"
+                print(name + " is less 0")
                 delta = 0
         except KeyError:
             delta = 0.0
@@ -300,7 +300,7 @@
     try:
         delta = (float(curr_metrics['data'][iface][index]) - float(last_metrics['data'][iface][index])) / (curr_metrics['time'] - last_metrics['time'])
         if delta < 0:
-            print name + " is less 0"
+            print(name + " is less 0")
             delta = 0
     except KeyError:
         delta = 0.0
@@ -320,8 +320,8 @@
         while True:
             for d in descriptors:
                 v = d['call_back'](d['name'])
-                print ('value for %s is ' + d['format']) % (d['name'],  v)
+                print(('value for %s is ' + d['format']) % (d['name'],  v))
             time.sleep(5)
-    except StandardError:
-        print sys.exc_info()[0]
+    except Exception:
+        print(sys.exc_info()[0])
         os._exit(1)
diff -ru ganglia-3.7.2.org/gmond/python_modules/network/netstats.py ganglia-3.7.2.new/gmond/python_modules/network/netstats.py
--- ganglia-3.7.2.org/gmond/python_modules/network/netstats.py	2024-11-14 23:44:01.716616982 +0700
+++ ganglia-3.7.2.new/gmond/python_modules/network/netstats.py	2024-11-14 23:48:40.704122796 +0700
@@ -6,7 +6,6 @@
 import re
 import time
 import copy
-import string
 
 PARAMS = {}
 
@@ -75,7 +74,7 @@
 
     try:
         result = metrics['data'][name]
-    except StandardError:
+    except Exception:
         result = 0
 
     return result
@@ -94,7 +93,7 @@
     try:
         delta = (float(curr_metrics['data'][group][metric]) - float(last_metrics['data'][group][metric])) / (curr_metrics['time'] - last_metrics['time'])
         if delta < 0:
-            print name + " is less 0"
+            print(name + " is less 0")
             delta = 0
     except KeyError:
         delta = 0.0
@@ -110,7 +109,7 @@
     try:
         pct = 100 * (float(curr_metrics['data']['tcpext']["tcploss"]) - float(last_metrics["data"]['tcpext']["tcploss"])) / (float(curr_metrics['data']['tcp']['outsegs']) + float(curr_metrics['data']['tcp']['insegs']) - float(last_metrics['data']['tcp']['insegs']) - float(last_metrics['data']['tcp']['outsegs']))
         if pct < 0:
-            print name + " is less 0"
+            print(name + " is less 0")
             pct = 0
     except KeyError:
         pct = 0.0
@@ -128,7 +127,7 @@
     try:
         pct = 100 * (float(curr_metrics['data']['tcp']["attemptfails"]) - float(last_metrics["data"]['tcp']["attemptfails"])) / (float(curr_metrics['data']['tcp']['outsegs']) + float(curr_metrics['data']['tcp']['insegs']) - float(last_metrics['data']['tcp']['insegs']) - float(last_metrics['data']['tcp']['outsegs']))
         if pct < 0:
-            print name + " is less 0"
+            print(name + " is less 0")
             pct = 0
     except Exception:
         pct = 0.0
@@ -144,7 +143,7 @@
     try:
         pct = 100 * (float(curr_metrics['data']['tcp']["retranssegs"]) - float(last_metrics['data']['tcp']["retranssegs"])) / (float(curr_metrics['data']['tcp']['outsegs']) + float(curr_metrics['data']['tcp']['insegs']) - float(last_metrics['data']['tcp']['insegs']) - float(last_metrics['data']['tcp']['outsegs']))
         if pct < 0:
-            print name + " is less 0"
+            print(name + " is less 0")
             pct = 0
     except KeyError:
         pct = 0.0
@@ -156,7 +155,7 @@
 
 def create_desc(skel, prop):
     d = skel.copy()
-    for k, v in prop.iteritems():
+    for k, v in prop.items():
         d[k] = v
     return d
 
@@ -253,6 +252,6 @@
     while True:
         for d in descriptors:
             v = d['call_back'](d['name'])
-            print '%s = %s' % (d['name'],  v)
-        print 'Sleeping 15 seconds'
+            print('%s = %s' % (d['name'],  v))
+        print('Sleeping 15 seconds')
         time.sleep(15)
diff -ru ganglia-3.7.2.org/gmond/python_modules/network/tcpconn.py ganglia-3.7.2.new/gmond/python_modules/network/tcpconn.py
--- ganglia-3.7.2.org/gmond/python_modules/network/tcpconn.py	2024-11-14 23:44:01.716616982 +0700
+++ ganglia-3.7.2.new/gmond/python_modules/network/tcpconn.py	2024-11-14 23:46:44.725249665 +0700
@@ -68,7 +68,7 @@
     global _WorkerThread
 
     if _WorkerThread is None:
-        print 'Error: No netstat data gathering thread created for metric %s' % name
+        print('Error: No netstat data gathering thread created for metric %s' % name)
         return 0
 
     if not _WorkerThread.running and not _WorkerThread.shuttingdown:
@@ -233,7 +233,7 @@
         if self.popenChild != None:
             try:
                 self.popenChild.wait()
-            except OSError, e:
+            except OSError as e:
                 if e.errno == 10:  # No child processes
                     pass
 
@@ -274,7 +274,7 @@
 
             try:
                 self.popenChild.wait()
-            except OSError, e:
+            except OSError as e:
                 if e.errno == 10:  # No child process
                     continue
 
@@ -361,7 +361,7 @@
         try:
             for d in _descriptors:
                 v = d['call_back'](d['name'])
-                print 'value for %s is %u' % (d['name'],  v)
+                print('value for %s is %u' % (d['name'],  v))
             time.sleep(5)
         except KeyboardInterrupt:
             os._exit(1)
diff -ru ganglia-3.7.2.org/gmond/python_modules/network/traffic1.py ganglia-3.7.2.new/gmond/python_modules/network/traffic1.py
--- ganglia-3.7.2.org/gmond/python_modules/network/traffic1.py	2024-11-14 23:44:01.716616982 +0700
+++ ganglia-3.7.2.new/gmond/python_modules/network/traffic1.py	2024-11-14 23:46:44.770250391 +0700
@@ -16,7 +16,7 @@
 
 def dprint(f, *v):
     if Debug:
-        print >> sys.stderr, "DEBUG: " + f % v
+        print("DEBUG: " + f % v, file=sys.stderr)
 
 
 class UpdateTrafficThread(threading.Thread):
@@ -76,7 +76,7 @@
             dprint("%s", ">>update_metric")
             self.stats = {}
             _stats = a[1].split()
-            for name, index in self.stats_tab.iteritems():
+            for name, index in self.stats_tab.items():
                 self.stats[name + '_' + self.target_device] = int(_stats[index])
             self.stats["time"] = time.time()
             dprint("%s", self.stats)
@@ -84,7 +84,7 @@
             if "time" in self.stats_prev:
                 dprint("%s: %d = %d - %d", "DO DIFF", self.stats["time"] - self.stats_prev["time"], self.stats["time"], self.stats_prev["time"])
                 d = self.stats["time"] - self.stats_prev["time"]
-                for name, cur in self.stats.iteritems():
+                for name, cur in self.stats.items():
                     self.metric[name] = float(cur - self.stats_prev[name]) / d
 
             self.stats_prev = self.stats.copy()
@@ -104,8 +104,8 @@
 def metric_init(params):
     global Desc_Skel, _Worker_Thread, Debug
 
-    print '[traffic1] Received the following parameters'
-    print params
+    print('[traffic1] Received the following parameters')
+    print(params)
 
     Desc_Skel = {
         'name'        : 'XXX',
@@ -172,7 +172,7 @@
 
 def create_desc(skel, prop):
     d = skel.copy()
-    for k, v in prop.iteritems():
+    for k, v in prop.items():
         d[k] = v
     return d
 
@@ -195,11 +195,11 @@
         while True:
             for d in descriptors:
                 v = d['call_back'](d['name'])
-                print ('value for %s is ' + d['format']) % (d['name'], v)
+                print(('value for %s is ' + d['format']) % (d['name'], v))
             time.sleep(5)
     except KeyboardInterrupt:
         time.sleep(0.2)
         os._exit(1)
-    except StandardError:
-        print sys.exc_info()[0]
+    except Exception:
+        print(sys.exc_info()[0])
         os._exit(1)
diff -ru ganglia-3.7.2.org/gmond/python_modules/nfs/nfsstats.py ganglia-3.7.2.new/gmond/python_modules/nfs/nfsstats.py
--- ganglia-3.7.2.org/gmond/python_modules/nfs/nfsstats.py	2024-11-14 23:44:01.713616933 +0700
+++ ganglia-3.7.2.new/gmond/python_modules/nfs/nfsstats.py	2024-11-14 23:48:22.968836360 +0700
@@ -16,7 +16,6 @@
 import time
 import syslog
 import sys
-import string
 
 
 def test_proc(p_file, p_string):
@@ -273,11 +272,11 @@
 
         # Parse our defined params list in order to ensure list will not exceed max_plimit
         n = 0
-        names_keys = configtable[i]['names'].keys()
+        names_keys = list(configtable[i]['names'].keys())
         keys_to_remove = []
         for _tmpkey in names_keys:
             _tmplist = names_keys
-            param_pos = re.split("{(\d+)\}", configtable[i]['names'][_tmpkey].values()[0])[1]
+            param_pos = re.split("{(\d+)\}", list(configtable[i]['names'][_tmpkey].values())[0])[1]
             if int(param_pos) > int(max_plimit):
                 keys_to_remove.append(_tmpkey)
             n += 1
@@ -368,8 +367,8 @@
     m_value = m.group(1)
 
     #RB: multiple (space seperated) values: calculate sum
-    if string.count(m_value, ' ') > 0:
-        m_fields = string.split(m_value, ' ')
+    if m_value.count(' ') > 0:
+        m_fields = m_value.split(' ')
 
         sum_value = 0
 
@@ -388,7 +387,7 @@
     if level > verboselevel:
         return
     if sys.stderr.isatty():
-        print text
+        print(text)
     else:
         syslog.syslog(text)
 
diff -ru ganglia-3.7.2.org/gmond/python_modules/process/procstat.py ganglia-3.7.2.new/gmond/python_modules/process/procstat.py
--- ganglia-3.7.2.org/gmond/python_modules/process/procstat.py	2024-11-14 23:44:01.714616949 +0700
+++ ganglia-3.7.2.new/gmond/python_modules/process/procstat.py	2024-11-14 23:46:44.982253815 +0700
@@ -144,7 +144,7 @@
     logging.debug('getting pgid for process: ' + proc)
     ERROR = 0
 
-    if pgid_list.has_key(proc) and os.path.exists('/proc/' + pgid_list[proc][0]):
+    if proc in pgid_list and os.path.exists('/proc/' + pgid_list[proc][0]):
         return pgid_list[proc]
 
     val = PROCESSES[proc]
@@ -245,14 +245,14 @@
 
     PROCESSES = params
 
-    for proc, val in PROCESSES.items():
+    for proc, val in list(PROCESSES.items()):
         print('')
-        print(' Testing ' + proc + ': ' + val)
+        print((' Testing ' + proc + ': ' + val))
 
         try:
             (ppid, pgid) = get_pgid(proc)
-        except Exception, e:
-            print(' failed getting pgid: ' + str(e))
+        except Exception as e:
+            print((' failed getting pgid: ' + str(e)))
             continue
 
         pids = get_pgroup(ppid, pgid)
@@ -262,7 +262,7 @@
         for pid in pids:
             # Read from binary file containing command line arguments
             args = file('/proc/' + pid + '/cmdline', 'rt').readline().replace('\0', ' ')
-            print(' ' + pid + ' ' + args)
+            print((' ' + pid + ' ' + args))
 
     logging.debug('success testing')
 
@@ -279,7 +279,7 @@
     else:
         last_update = cur_time
 
-    for proc, val in PROCESSES.items():
+    for proc, val in list(PROCESSES.items()):
         logging.debug(' updating for ' + proc)
 
         # setup storage lists
@@ -292,7 +292,7 @@
         # Update CPU utilization
         try:
             (ppid, pgid) = get_pgid(proc)
-        except Exception, e:
+        except Exception as e:
             logging.warning(' failed getting pgid: ' + str(e))
             stats[proc]['cpu'] = 0.0
             stats[proc]['mem'] = 0
@@ -389,7 +389,7 @@
     time_max = 60
     for label in descriptions:
         for proc in PROCESSES:
-            if stats[proc].has_key(label):
+            if label in stats[proc]:
 
                 d = {
                     'name': 'procstat_' + proc + '_' + label,
@@ -433,12 +433,12 @@
         # Display them
         i = 0
         for f in fields:
-            print '%15s: %s' % (f, stat[i])
+            print('%15s: %s' % (f, stat[i]))
             i += 1
 
     except:
-        print('failed to get /proc/' + pid + '/stat')
-        print(traceback.print_exc(file=sys.stdout))
+        print(('failed to get /proc/' + pid + '/stat'))
+        print((traceback.print_exc(file=sys.stdout)))
 
 
 def display_proc_statm(pid):
@@ -452,12 +452,12 @@
         # Display them
         i = 0
         for f in fields:
-            print '%15s: %s' % (f, statm[i])
+            print('%15s: %s' % (f, statm[i]))
             i += 1
 
     except:
-        print('failed to get /proc/' + pid + '/statm')
-        print(traceback.print_exc(file=sys.stdout))
+        print(('failed to get /proc/' + pid + '/statm'))
+        print((traceback.print_exc(file=sys.stdout)))
 
 
 def metric_cleanup():
@@ -502,7 +502,7 @@
         update_stats()
 
         print('')
-        print(' waiting ' + str(MAX_UPDATE_TIME) + ' seconds')
+        print((' waiting ' + str(MAX_UPDATE_TIME) + ' seconds'))
         time.sleep(MAX_UPDATE_TIME)
 
     metric_init(params)
@@ -510,7 +510,7 @@
     for d in descriptors:
         v = d['call_back'](d['name'])
         if not options.quiet:
-            print ' %s: %s %s [%s]' % (d['name'], d['format'] % v, d['units'], d['description'])
+            print(' %s: %s %s [%s]' % (d['name'], d['format'] % v, d['units'], d['description']))
 
         if options.gmetric:
             if d['value_type'] == 'uint':
diff -ru ganglia-3.7.2.org/gmond/python_modules/ssl/entropy.py ganglia-3.7.2.new/gmond/python_modules/ssl/entropy.py
--- ganglia-3.7.2.org/gmond/python_modules/ssl/entropy.py	2024-11-14 23:44:01.716616982 +0700
+++ ganglia-3.7.2.new/gmond/python_modules/ssl/entropy.py	2024-11-14 23:46:44.990253945 +0700
@@ -53,4 +53,4 @@
     metric_init({})
     for d in descriptors:
         v = d['call_back'](d['name'])
-        print 'value for %s is %u' % (d['name'],  v)
+        print('value for %s is %u' % (d['name'],  v))
diff -ru ganglia-3.7.2.org/gmond/python_modules/varnish/varnish.py ganglia-3.7.2.new/gmond/python_modules/varnish/varnish.py
--- ganglia-3.7.2.org/gmond/python_modules/varnish/varnish.py	2024-11-14 23:44:01.713616933 +0700
+++ ganglia-3.7.2.new/gmond/python_modules/varnish/varnish.py	2024-11-14 23:46:45.148256496 +0700
@@ -51,7 +51,7 @@
 
 def create_desc(skel, prop):
     d = skel.copy()
-    for k, v in prop.iteritems():
+    for k, v in prop.items():
         d[k] = v
     return d
 
@@ -92,7 +92,7 @@
     name = name[len(NAME_PREFIX):]  # remove prefix from name
     try:
         result = metrics['data'][name]
-    except StandardError:
+    except Exception:
         result = 0
 
     return result
@@ -109,9 +109,9 @@
     try:
         delta = float(curr_metrics['data'][name] - last_metrics['data'][name]) / (curr_metrics['time'] - last_metrics['time'])
         if delta < 0:
-            print "Less than 0"
+            print("Less than 0")
             delta = 0
-    except StandardError:
+    except Exception:
         delta = 0
 
     return delta
@@ -1038,6 +1038,6 @@
     descriptors = metric_init(PARAMS)
     while True:
         for d in descriptors:
-            print (('%s = %s') % (d['name'], d['format'])) % (d['call_back'](d['name']))
-        print 'Sleeping 15 seconds'
+            print((('%s = %s') % (d['name'], d['format'])) % (d['call_back'](d['name'])))
+        print('Sleeping 15 seconds')
         time.sleep(15)
diff -ru ganglia-3.7.2.org/gmond/python_modules/vm_stats/vm_stats.py ganglia-3.7.2.new/gmond/python_modules/vm_stats/vm_stats.py
--- ganglia-3.7.2.org/gmond/python_modules/vm_stats/vm_stats.py	2024-11-14 23:44:01.715616965 +0700
+++ ganglia-3.7.2.new/gmond/python_modules/vm_stats/vm_stats.py	2024-11-14 23:46:45.263258354 +0700
@@ -69,7 +69,7 @@
 
     try:
         result = metrics['data'][name]
-    except StandardError:
+    except Exception:
         result = 0
 
     return result
@@ -86,7 +86,7 @@
     try:
         delta = (float(curr_metrics['data'][name]) - float(last_metrics['data'][name])) / (curr_metrics['time'] - last_metrics['time'])
         if delta < 0:
-            print name + " is less 0"
+            print(name + " is less 0")
             delta = 0
     except KeyError:
         delta = 0.0
@@ -112,7 +112,7 @@
 
         delta = 100 * (float(curr_metrics['data']['pgsteal_normal']) - float(last_metrics['data']['pgsteal_normal'])) / pgscan_diff
         if delta < 0:
-            print name + " is less 0"
+            print(name + " is less 0")
             delta = 0
     except KeyError:
         delta = 0.0
@@ -122,7 +122,7 @@
 
 def create_desc(skel, prop):
     d = skel.copy()
-    for k, v in prop.iteritems():
+    for k, v in prop.items():
         d[k] = v
     return d
 
@@ -734,6 +734,6 @@
     while True:
         for d in descriptors:
             v = d['call_back'](d['name'])
-            print '%s = %s' % (d['name'],  v)
-        print 'Sleeping 15 seconds'
+            print('%s = %s' % (d['name'],  v))
+        print('Sleeping 15 seconds')
         time.sleep(15)
diff -ru ganglia-3.7.2.org/gmond/python_modules/xen/xenstats.py ganglia-3.7.2.new/gmond/python_modules/xen/xenstats.py
--- ganglia-3.7.2.org/gmond/python_modules/xen/xenstats.py	2024-11-14 23:44:01.716616982 +0700
+++ ganglia-3.7.2.new/gmond/python_modules/xen/xenstats.py	2024-11-14 23:46:45.282258661 +0700
@@ -128,4 +128,4 @@
     metric_init('init')
     for d in descriptors:
         v = d['call_back'](d['name'])
-        print 'value for %s is %u' % (d['name'],  v)
+        print('value for %s is %u' % (d['name'],  v))
